// Generated by CodiumAI

import { Doris } from '@app/doris/doris';
import { keepTrackApi } from '@app/keepTrackApi';
import { SelectSatManager } from '@app/plugins/select-sat-manager/select-sat-manager';
import { UrlManager } from '@app/static/url-manager';
import { BaseObject } from 'ootk';
import { setupStandardEnvironment } from './environment/standard-env';
import { KeepTrackApiEvents } from '@app/keeptrack/events/event-types';


describe('UrlManager_class', () => {
  beforeEach(() => {
    setupStandardEnvironment();
    jest.resetAllMocks();
  });

  // Tests that URL parameters with valid satellite and search values are parsed correctly
  it('should_parse_valid_satellite_and_search_params', () => {
    const url = 'http://localhost:8080/?sat=25544&search=ISS&rate=1.0&date=1630512000000';

    Object.defineProperty(window, 'location', {
      value: new URL(url),
      writable: true,
    });

    const expectedSelectedSat = 25544;
    const expectedCurrentSearch = 'ISS';
    const expectedPropRate = 1;
    // const expectedStaticOffset = 1630512000000 - Date.now();
    const catalogManagerInstance = keepTrackApi.getCatalogManager();
    const uiManagerInstance = keepTrackApi.getUiManager();
    const timeManagerInstance = keepTrackApi.getTimeManager();

    // eslint-disable-next-line no-empty-function
    jest.spyOn(window.history, 'replaceState').mockImplementation(() => { });
    const selectedSatelliteManager = keepTrackApi.getPlugin(SelectSatManager);

    expect(selectedSatelliteManager).toBeDefined();
    expect(selectedSatelliteManager).not.toBeNull();

    if (!selectedSatelliteManager) {
      throw new Error('SelectedSatelliteManager is null');
    }

    selectedSatelliteManager.selectSat = jest.fn();
    catalogManagerInstance.sccNum2Id = (objNum: number) => objNum;
    uiManagerInstance.doSearch = jest.fn();
    uiManagerInstance.searchManager.hideResults = jest.fn();

    Doris.getInstance().emit(KeepTrackApiEvents.HtmlInitialize);
    Doris.getInstance().emit(KeepTrackApiEvents.AfterHtmlInitialize);

    UrlManager.parseGetVariables();
    Doris.getInstance().emit(KeepTrackApiEvents.onKeepTrackReady);

    expect(selectedSatelliteManager.selectSat).toHaveBeenCalledWith(expectedSelectedSat);
    expect(uiManagerInstance.doSearch).toHaveBeenCalledWith(expectedCurrentSearch);
    expect(timeManagerInstance.propRate).toBe(expectedPropRate);
    // TODO: Handle the timer in parse_valid_params

    // expect(timeManagerInstance.staticOffset).toBe(expectedStaticOffset);
  });

  // Tests that intldes parameter with valid value is parsed correctly
  it('test_parse_valid_params', () => {
    const url = 'http://localhost:8080/?intldes=1988-064A';

    Object.defineProperty(window, 'location', {
      value: new URL(url),
      writable: true,
    });

    const expectedSelectedSat = 10;
    const catalogManagerInstance = keepTrackApi.getCatalogManager();
    const uiManagerInstance = keepTrackApi.getUiManager();

    // eslint-disable-next-line no-empty-function
    jest.spyOn(window.history, 'replaceState').mockImplementation(() => { });
    const selectedSatelliteManager = keepTrackApi.getPlugin(SelectSatManager);

    expect(selectedSatelliteManager).toBeDefined();
    expect(selectedSatelliteManager).not.toBeNull();

    if (!selectedSatelliteManager) {
      throw new Error('SelectedSatelliteManager is null');
    }

    selectedSatelliteManager.selectSat = jest.fn();
    catalogManagerInstance.intlDes2id = () => 10;
    catalogManagerInstance.getObject = () => ({ id: 10, sccNum: '25544', active: true }) as unknown as BaseObject;
    uiManagerInstance.doSearch = jest.fn();
    uiManagerInstance.searchManager.hideResults = jest.fn();

    UrlManager.parseGetVariables();
    Doris.getInstance().emit(KeepTrackApiEvents.onKeepTrackReady);

    expect(selectedSatelliteManager.selectSat).toHaveBeenCalledWith(expectedSelectedSat);
  });

  // Tests that URL parameters valid but satellite not found
  it('test_parse_valid_params_sat_not_found', () => {
    const url = 'http://localhost:8080/?intldes=1988-064A';

    Object.defineProperty(window, 'location', {
      value: new URL(url),
      writable: true,
    });

    const catalogManagerInstance = keepTrackApi.getCatalogManager();
    const uiManagerInstance = keepTrackApi.getUiManager();

    // eslint-disable-next-line no-empty-function
    jest.spyOn(window.history, 'replaceState').mockImplementation(() => { });
    uiManagerInstance.toast = jest.fn();
    const selectedSatelliteManager = keepTrackApi.getPlugin(SelectSatManager);

    expect(selectedSatelliteManager).toBeDefined();
    expect(selectedSatelliteManager).not.toBeNull();

    if (!selectedSatelliteManager) {
      throw new Error('SelectedSatelliteManager is null');
    }

    selectedSatelliteManager.selectSat = jest.fn();
    catalogManagerInstance.intlDes2id = () => null;
    uiManagerInstance.doSearch = jest.fn();
    uiManagerInstance.searchManager.hideResults = jest.fn();

    UrlManager.parseGetVariables();
    Doris.getInstance().emit(KeepTrackApiEvents.onKeepTrackReady);

    expect(uiManagerInstance.toast).toHaveBeenCalled();
  });

  // Tests that URL parameters valid but satellite not found2
  it('test_parse_valid_params_sat_not_found2', () => {
    const url = 'http://localhost:8080/?sat=99999';

    Object.defineProperty(window, 'location', {
      value: new URL(url),
      writable: true,
    });

    const catalogManagerInstance = keepTrackApi.getCatalogManager();
    const uiManagerInstance = keepTrackApi.getUiManager();

    // eslint-disable-next-line no-empty-function
    jest.spyOn(window.history, 'replaceState').mockImplementation(() => { });
    uiManagerInstance.toast = jest.fn();
    const selectedSatelliteManager = keepTrackApi.getPlugin(SelectSatManager);

    expect(selectedSatelliteManager).toBeDefined();
    expect(selectedSatelliteManager).not.toBeNull();

    if (!selectedSatelliteManager) {
      throw new Error('SelectedSatelliteManager is null');
    }

    selectedSatelliteManager.selectSat = jest.fn();
    catalogManagerInstance.sccNum2Id = () => null;
    uiManagerInstance.doSearch = jest.fn();
    uiManagerInstance.searchManager.hideResults = jest.fn();

    UrlManager.parseGetVariables();
    Doris.getInstance().emit(KeepTrackApiEvents.onKeepTrackReady);

    expect(uiManagerInstance.toast).toHaveBeenCalled();
  });

  // Tests that URL parameters with empty parameters are parsed correctly
  it('test_parse_empty_params', () => {
    const url = 'http://localhost:8080/';

    Object.defineProperty(window, 'location', {
      value: new URL(url),
      writable: true,
    });

    const expectedSelectedSat = 25544;
    const expectedCurrentSearch = 'ISS';
    const expectedPropRate = 1;
    const expectedStaticOffset = 1630512000000 - Date.now();
    const catalogManagerInstance = keepTrackApi.getCatalogManager();
    const uiManagerInstance = keepTrackApi.getUiManager();
    const timeManagerInstance = keepTrackApi.getTimeManager();

    // eslint-disable-next-line no-empty-function
    jest.spyOn(window.history, 'replaceState').mockImplementation(() => { });
    const selectedSatelliteManager = keepTrackApi.getPlugin(SelectSatManager);

    expect(selectedSatelliteManager).toBeDefined();
    expect(selectedSatelliteManager).not.toBeNull();

    if (!selectedSatelliteManager) {
      throw new Error('SelectedSatelliteManager is null');
    }
    selectedSatelliteManager.selectSat = jest.fn();
    catalogManagerInstance.sccNum2Id = (objNum: number) => objNum;
    uiManagerInstance.doSearch = jest.fn();
    uiManagerInstance.searchManager.hideResults = jest.fn();

    UrlManager.parseGetVariables();
    Doris.getInstance().emit(KeepTrackApiEvents.onKeepTrackReady);

    expect(selectedSatelliteManager.selectSat).not.toHaveBeenCalledWith(expectedSelectedSat);
    expect(uiManagerInstance.doSearch).not.toHaveBeenCalledWith(expectedCurrentSearch);
    expect(timeManagerInstance.propRate).not.toBe(expectedPropRate);
    expect(timeManagerInstance.staticOffset).not.toBe(expectedStaticOffset);
  });

  // Tests that URL parameters with invalid parameters are not parsed
  it('test_parse_invalid_params', () => {
    const url = 'http://localhost:8080/?sat=invalid&search=ISS&rate=invalid&date=invalid';

    Object.defineProperty(window, 'location', {
      value: new URL(url),
      writable: true,
    });

    const expectedSelectedSat = 25544;
    const expectedCurrentSearch = 'ISS';
    const expectedPropRate = 1;
    const expectedStaticOffset = 1630512000000 - Date.now();
    const catalogManagerInstance = keepTrackApi.getCatalogManager();
    const uiManagerInstance = keepTrackApi.getUiManager();
    const timeManagerInstance = keepTrackApi.getTimeManager();

    // eslint-disable-next-line no-empty-function
    jest.spyOn(window.history, 'replaceState').mockImplementation(() => { });
    const selectedSatelliteManager = keepTrackApi.getPlugin(SelectSatManager);

    expect(selectedSatelliteManager).toBeDefined();
    expect(selectedSatelliteManager).not.toBeNull();

    if (!selectedSatelliteManager) {
      throw new Error('SelectedSatelliteManager is null');
    }
    selectedSatelliteManager.selectSat = jest.fn();
    catalogManagerInstance.sccNum2Id = (objNum: number) => objNum;
    uiManagerInstance.doSearch = jest.fn();
    uiManagerInstance.searchManager.hideResults = jest.fn();

    UrlManager.parseGetVariables();
    Doris.getInstance().emit(KeepTrackApiEvents.onKeepTrackReady);

    expect(selectedSatelliteManager.selectSat).not.toHaveBeenCalledWith(expectedSelectedSat);
    expect(uiManagerInstance.doSearch).toHaveBeenCalledWith(expectedCurrentSearch);
    expect(timeManagerInstance.propRate).not.toBe(expectedPropRate);
    expect(timeManagerInstance.staticOffset).not.toBe(expectedStaticOffset);
  });

  // Test missile params are parsed correctly
  it.skip('test_parse_missile_params', () => {
    // TODO: Implement
  });
});
